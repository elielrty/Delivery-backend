// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String      @id @default(uuid())
  name      String
  email     String      @unique
  password  String
  isAdmin   Boolean     @default(false)
  phone     String?
  createdAt DateTime    @default(now())
  deleteAt  DateTime?
  updateAt  DateTime?
  createBy  String?
  updateBy  String?
  deleteBy  String?
  address   Address[]   @relation("address_users")
  userToken UserToken[]
  roles     Role[]      @relation("users_roles")
  commerce  Commerce[]  @relation("users_commerces")

  @@map("users")
}

model CategoryProduct {
  id        String    @id @default(uuid())
  name      String
  type      String
  products  Product[]
  createdAt DateTime  @default(now())
  deleteAt  DateTime?
  updateAt  DateTime?
  createBy  String?
  updateBy  String?
  deleteBy  String?

  @@map("categories_products")
}

model Product {
  id                String             @id @default(uuid())
  description       String
  name              String
  value             Decimal
  isDiscount        Boolean
  category          CategoryProduct    @relation(fields: [category_id], references: [id])
  category_id       String
  requests_products RequestsProducts[]
  createdAt         DateTime           @default(now())
  deleteAt          DateTime?
  updateAt          DateTime?
  createBy          String?
  updateBy          String?
  deleteBy          String?

  @@map("products")
}

model CategoryCommerce {
  id        String     @id @default(uuid())
  name      String
  type      String
  commerces Commerce[]
  createdAt DateTime   @default(now())
  deleteAt  DateTime?
  updateAt  DateTime?
  createBy  String?
  updateBy  String?
  deleteBy  String?

  @@map("categories_commerces")
}

model Commerce {
  id          String           @id @default(uuid())
  name        String
  cnpj        String
  isOpen      Boolean          @default(false)
  phone       String
  category    CategoryCommerce @relation(fields: [category_id], references: [id])
  category_id String
  address     Address[]        @relation("address_commerces")
  requests    Requests[]
  users       User[]           @relation("users_commerces")
  createdAt   DateTime         @default(now())
  deleteAt    DateTime?
  updateAt    DateTime?
  createBy    String?
  updateBy    String?
  deleteBy    String?

  @@map("commerces")
}

model Address {
  id           String     @id @default(uuid())
  street       String
  neighborhood String
  cep          String
  number       String
  state        String
  city         String
  complement   String?
  reference    String?
  createdAt    DateTime   @default(now())
  deleteAt     DateTime?
  updateAt     DateTime?
  createBy     String?
  updateBy     String?
  deleteBy     String?
  commerces    Commerce[] @relation("address_commerces")
  users        User[]     @relation("address_users")
  requests     Requests[]

  @@map("address")
}

model Requests {
  id          String             @id @default(uuid())
  value       Decimal
  status      String
  address     Address            @relation(fields: [address_id], references: [id])
  address_id  String
  commerce    Commerce           @relation(fields: [commerce_id], references: [id])
  commerce_id String
  requests    RequestsProducts[]
  createdAt   DateTime           @default(now())
  deleteAt    DateTime?
  updateAt    DateTime?
  createBy    String?
  updateBy    String?
  deleteBy    String?

  @@map("requests")
}

model RequestsProducts {
  id         String    @id @default(uuid())
  request    Requests  @relation(fields: [request_id], references: [id])
  request_id String
  product    Product   @relation(fields: [product_id], references: [id])
  product_id String
  createdAt  DateTime  @default(now())
  deleteAt   DateTime?
  updateAt   DateTime?
  createBy   String?
  updateBy   String?
  deleteBy   String?

  @@map("requests_products")
}

model UserToken {
  id            String    @id @default(uuid())
  refresh_token String
  fcm_token     Boolean   @default(false)
  expires_date  DateTime
  user          User      @relation(fields: [user_id], references: [id])
  user_id       String
  createdAt     DateTime  @default(now())
  deleteAt      DateTime?
  updateAt      DateTime?
  createBy      String?
  updateBy      String?
  deleteBy      String?

  @@map("users_tokens")
}

model Role {
  id        String    @id @default(uuid())
  role      String
  createdAt DateTime  @default(now())
  deleteAt  DateTime?
  updateAt  DateTime?
  createBy  String?
  updateBy  String?
  deleteBy  String?
  users     User[]    @relation("users_roles")

  @@map("roles")
}
